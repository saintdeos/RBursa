next
exit
next
step
worker
step
next
exit
step
next
exit
pp devs.values_at(*pr).flatten.select{|r| r.rank == options[:complexity]}.first
pp devs.values_at(*pr).flatten.select{|r| r.rank == options[:complexity]}
pp devs.values_at(*pr).flatten.map{|r| r.rank == options[:complexity]}
pp devs.values_at(*pr).flatten
pp @devs.values_at(*pr).flatten
pp @devs.values_at(:seniors).flatten
pp @devs.flatten
@devs.flatten
@devs
2devs
options[:complexity]
step
next
exit
options[:complexity]
next
exit
t.devs.values_at(:seniors, :developers, :juniors)
t.all
t.devs.values_at(:senior)
t.devs.values_at(options[:complexity])
options[:complexity]
options
 :complexity
t.devs.values_at(:complexity)
step
t.devs.values_at(:complexity)
step
t.devs.values_at(:complexity)
t.devs(:complexity)
t.devs
t.select_worker.values_at(rank)
t.select_worker.values_at(3)
t.select_worker.values_at(2)
t.select_worker.values_at(1)
t.select_worker.values_at(1,3,4,5).first
t.select_worker.values_at(:senior).first
select_worker.values_at(:senior).first
next
exit
pp @groups.values_at(*@pr).flatten.sort_by{|e| e.work_list}
@groups.values_at(*@pr).flatten.sort_by{|e| e.work_list}
worker
step
worker
step
worker
step
next
exit
next
exit
t.report
next
exit
t.add_task('taste food')
next
exit
next
exit
next
exit
bl[:junior].call(select_worker, task)
on_task[:junior].call(select_worker, task)
on_task.bl[:junior].call(select_worker, task)
t.on_task.@bl[:junior].call(select_worker, task)
t.on_task.bl[:junior].call(select_worker, task)
step
t.on_task.bl[:junior].call(select_worker, task)
t.on_task.bl[:junior]
select_worker.rank
task
select_worker
on_task.bl[:junior]
on_task.bl[:junior].call(select_worker, task)
task
step
next
t.add_task('taste food')
next
exit
t.add_task('taste food')
next
exit
t.add_task('taste food')
add_task('taste food')
next
exit
t.add_task('taste food')
next
exit
t.bl[:junior].call(t.select_worker, 'task')
add_task.task
task
t.bl[:junior].call(t.select_worker, task)
t.bl[:junior].call(t.select_worker, t.task)
t.bl[:junior].call(t.select_worker, t.select_worker.task)
t.select_worker.
t.bl[:junior].class
t.bl[:junior].call(t.select_worker, t.select_work.task)
t.bl[:junior].call(t.select_worker.rank, task)
t.bl[:junior].call(select_worker.rank, task)
@bl.call(select_worker.rank, task)
bl.call(select_worker.rank, task)
t.bl.call(select_worker.rank, task)
t.bl.call(select_worker, task)
t.bl
step
type
@bl
t.bl
step
exit
t.add_task('taste food')
next
exit
t.add_task('taste food')
next
exit
t.add_task('taste food')
next
exit
junior.call(select_worker, task)
junior.call(1, 2)
on_task.call(1, 2)
on_task.call(1)
on_task.call(:junior)
on_task.call
on_task.call(select_worker)
on_task.call(select_worker, task)
on_task.callon_task.call
on_task.callon_task.call(select_worker)
on_task.callon_task.call(select_worker, task)
on_task.callon_task.call(select_worker.rank, task)
select_worker
on_task.call
task
select_worker.rank
step
task
select_worker.rank
t.select_worker.rank
step
next
t.add_task('taste food')
next
step
next
step
steo
next
step
block
step
type
step
dev
step
dev
step
next
exit
t.add_task('taste food')
next
exit
t.add_task('taste food')
next
exit
t.select_worker.rank
t.add_task('taste food')
next
exit
t.groups.values_at(*t.pr).flatten
t.groups.values_at(*t.pr).map{|a| a+=a}
t.groups.values_at(*t.pr).map{|a| a=+a}
t.groups.values_at(*t.pr).+
t.groups.values_at(*t.pr)[:+]
t.groups.values_at(*t.pr).[:+]
t.groups.values_at(*t.pr)
t.pr
next
exit
t.groups.values_at(*t.pr).to_s
t.groups.values_at(*t.pr)
t.groups.values_at(t.pr)
t.group.values_at(y.pr)
next
exit
t.groups.values_at(*t.pr)
t.groups.values_at(t.pr)
t.groups
t.report
next
t.pr.join(", ")
t.pr.join(", :")
t.pr.join(", ").to_sym
t.pr.join(", ")
t.pr.each{|n| n.to_sym}
t.pr.aech{|n| n.to_sym}
t.pr.map{|n| n.to_sym}.class
t.pr.map{|n| n.to_sym}
p t.pr.map{|n| n.to_s}
t.pr.map{|n| n.to_s}
t.pr
t.pr[&:map]
t.pr.inspect
t.pr
priority
t.pr.to_s
t.pr
t.groups.values_at(t.pr.to_s)
t.groups.values_at(t.pr)
t.groups
pp t.groups.sort_by{|k,v| t.pr.index(k)}
t.groups.sort_by{|k,v| t.pr.index(k)}
t.groups.sort_by{|k,v| t.pr.index(k)}.all
t.all
all
t.groups.sort_by{|k,v| t.pr.index(k)}.to_a
t.groups.sort_by{|k,v| t.pr.index(k)}
t.groups.sort_by{|k| t.pr.index(k)}
t.groups.sort_by{|k,v| [v.work_list, t.pr.index(k)]}
t.groups.sort_by{|k,v| [v.work.list, t.pr.index(k)]}
t.groups.sort_by{|k,v| [v.index(work_list), t.pr.index(k)]}
t.groups.sort_by{|k,v| t.pr.index(k)}
@pt
t.groups.sort_by{|k,v| @pr.index(k)}
t.groups
next
exit
next
exit
pp t.team_list
pp t.group_list
pp t.groups
next
exit
t.seniors
t.juniors
pp t.groups
next
exit
pp t.groups
next
exit
